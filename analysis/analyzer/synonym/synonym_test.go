//	Copyright (c) 2019 Couchbase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package synonym

import (
	"fmt"
	"testing"

	"github.com/blevesearch/bleve/v2/analysis"
	"github.com/blevesearch/bleve/v2/registry"
	"github.com/stretchr/testify/assert"
)

func TestSynonymAnalyzer(t *testing.T) {
	tests := []struct {
		input  analysis.TestStruct
		output analysis.TokenStream
	}{
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b c e f g"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     8,
					End:       11,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("g"),
					Position:  6,
					Type:      0,
					Start:     12,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("b b b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("b a")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("b"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b c"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("spider man"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("spiderman"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       10,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("spider"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       6,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("man"),
					Position:  2,
					Type:      0,
					Start:     7,
					End:       10,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("ball"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("i-pod"), []byte("ipod"), []byte("ipoooood")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("baz")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("this test"), []byte("that testing")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("ball"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       4,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("i-pod"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("i-pod"), []byte("ipod"), []byte("ipoooood")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("baz")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("this test"), []byte("that testing")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("ipod"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("ipoooood"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("i-pod"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("foo"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("i-pod"), []byte("ipod"), []byte("ipoooood")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("baz")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("this test"), []byte("that testing")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("foo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("baz"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("bar"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("this test"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("i-pod"), []byte("ipod"), []byte("ipoooood")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("foo")},
						RHS:           [][]byte{[]byte("baz")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("this test"), []byte("that testing")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("that"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("this"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       4,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("testing"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("test"),
					Position:  3,
					Type:      0,
					Start:     5,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("b c g a f b d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("c")},
						RHS:           [][]byte{[]byte("8 2 5 6 7")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("f c e d f"), []byte("1")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c g a f d"), []byte("6 5 5")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e c")},
						RHS:           [][]byte{[]byte("4")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("g")},
						RHS:           [][]byte{[]byte("5")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a g b f e")},
						RHS:           [][]byte{[]byte("5 0 7 7")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("1")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("1"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("8"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("2"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("5"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("6"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("7"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("5"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  8,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("f"),
					Position:  9,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("1"),
					Position:  10,
					Type:      analysis.Synonym,
					Start:     10,
					End:       11,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  11,
					Type:      0,
					Start:     12,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a b c e"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b c d")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("e"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("b a b b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("b b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("y"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("b b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("b b b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("y"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b c"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  3,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b c"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c d e a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("e"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  5,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x y")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("m"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("n"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("o"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  6,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  7,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c d d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x y")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("m"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("n"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("o"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  6,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c A B D"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("x y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("m"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("n"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("o"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  6,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b c")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c a d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("d e")},
						RHS:           [][]byte{[]byte("m n o")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a b c d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b c")},
						RHS:           [][]byte{[]byte("z")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("z"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       5,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("f a b c e"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b c d")},
						RHS:           [][]byte{[]byte("x")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("y")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("f"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  3,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("e"),
					Position:  4,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("a b")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("ab"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("$"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("$"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("aa"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("b"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("bb"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a $"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("aa"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("$ a"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("$"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aa"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a a"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("aa"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aa"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("z x c v"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("zxcv"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("z x c $"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("ab")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a c")},
						RHS:           [][]byte{[]byte("ac")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("aa")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("b")},
						RHS:           [][]byte{[]byte("bb")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z x c v")},
						RHS:           [][]byte{[]byte("zxcv")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("x c")},
						RHS:           [][]byte{[]byte("xc")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("z"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("xc"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  3,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a b c"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("bar"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("fee"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  4,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("x a b c d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("x"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bar"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("fee"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  4,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  5,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("harness"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("holder"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("extras"),
					Position:  8,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  9,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a b a"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("bar"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("fee"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("b"),
					Position:  3,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("foo"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  4,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c d c d"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("harness"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("holder"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("extras"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  5,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  6,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("harness"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("holder"),
					Position:  8,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("extras"),
					Position:  9,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  10,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("e f"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("foo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("baz"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("bar"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("bee"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("g i j k g"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("g"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("feep"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       7,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("i"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("j"),
					Position:  3,
					Type:      0,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("k"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("g"),
					Position:  5,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("a m c e x"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("foo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("barks"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("loudly"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  5,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("c d m c e x"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("c"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("harness"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("holder"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("extras"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("d"),
					Position:  5,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("dog"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     4,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("barks"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("loudly"),
					Position:  8,
					Type:      analysis.Synonym,
					Start:     4,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("x"),
					Position:  9,
					Type:      0,
					Start:     10,
					End:       11,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("p q z y t"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("a")},
						RHS:           [][]byte{[]byte("foo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("a b")},
						RHS:           [][]byte{[]byte("bar fee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("b c")},
						RHS:           [][]byte{[]byte("dog collar")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("c d")},
						RHS:           [][]byte{[]byte("dog harness holder extras")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("m c e")},
						RHS:           [][]byte{[]byte("dog barks loudly")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("i j k")},
						RHS:           [][]byte{[]byte("feep")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("foo bar")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("e f")},
						RHS:           [][]byte{[]byte("baz bee")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("z")},
						RHS:           [][]byte{[]byte("boo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("y")},
						RHS:           [][]byte{[]byte("bee")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("p"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("q"),
					Position:  2,
					Type:      0,
					Start:     2,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("boo"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bee"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("y"),
					Position:  4,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("t"),
					Position:  5,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("xyzzy bbb pot of gold"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("aaaa1 aaaa2 aaaa3")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("bbbb1 bbbb2")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("xyzzy"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bbbb1"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bbb"),
					Position:  2,
					Type:      0,
					Start:     6,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("bbbb2"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("pot"),
					Position:  4,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  5,
					Type:      0,
					Start:     14,
					End:       16,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("gold"),
					Position:  6,
					Type:      0,
					Start:     17,
					End:       21,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("xyzzy aaa pot of gold"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("aaaa1 aaaa2 aaaa3")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("bbbb1 bbbb2")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("xyzzy"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaaa1"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaa"),
					Position:  2,
					Type:      0,
					Start:     6,
					End:       9,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("aaaa2"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaaa3"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("pot"),
					Position:  5,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  6,
					Type:      0,
					Start:     14,
					End:       16,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("gold"),
					Position:  7,
					Type:      0,
					Start:     17,
					End:       21,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("xyzzy bbb pot of gold"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("aaaa1 aaaa2 aaaa3")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("bbbb1 bbbb2")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("xyzzy"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bbbb1"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("bbbb2"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("pot"),
					Position:  4,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  5,
					Type:      0,
					Start:     14,
					End:       16,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("gold"),
					Position:  6,
					Type:      0,
					Start:     17,
					End:       21,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("xyzzy aaa pot of gold"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("aaaa1 aaaa2 aaaa3")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("bbbb1 bbbb2")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("xyzzy"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaaa1"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaaa2"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("aaaa3"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     6,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("pot"),
					Position:  5,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  6,
					Type:      0,
					Start:     14,
					End:       16,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("gold"),
					Position:  7,
					Type:      0,
					Start:     17,
					End:       21,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("wtf happened"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("wtf")},
						RHS:           [][]byte{[]byte("what the fudge")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("what"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("wtf"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("the"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("fudge"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("happened"),
					Position:  4,
					Type:      0,
					Start:     4,
					End:       12,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("zoo zoo $ zoo"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("zoo")},
						RHS:           [][]byte{[]byte("zoo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  3,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("zoo zoo $ zoo"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("zoo")},
						RHS:           [][]byte{[]byte("zoo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("zoo")},
						RHS:           [][]byte{[]byte("zoo zoo")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  5,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("zoo zoo $ zoo"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("zoo zoo")},
						RHS:           [][]byte{[]byte("zoo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  3,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  4,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("zoo zoo $ zoo"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("zoo zoo")},
						RHS:           [][]byte{[]byte("zoo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("zoo")},
						RHS:           [][]byte{[]byte("zoo zoo")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("$"),
					Position:  3,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  4,
					Type:      0,
					Start:     10,
					End:       13,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("zoo"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     10,
					End:       13,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("aaa"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("two words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("one two"), []byte("very many multiple words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("ee ff"), []byte("gg"), []byte("h i j k"), []byte("h i")},
						RHS:           [][]byte{[]byte("one")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("cc dd")},
						RHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("two"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("words"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("amazing aaa"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("two words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("one two"), []byte("very many multiple words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("ee ff"), []byte("gg"), []byte("h i j k"), []byte("h i")},
						RHS:           [][]byte{[]byte("one")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("cc dd")},
						RHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("amazing"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("two"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     8,
					End:       11,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("words"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     8,
					End:       11,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("p ee ff s"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("two words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("one two"), []byte("very many multiple words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("ee ff"), []byte("gg"), []byte("h i j k"), []byte("h i")},
						RHS:           [][]byte{[]byte("one")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("cc dd")},
						RHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("p"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("one"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  3,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("p h i j s"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("two words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("one two"), []byte("very many multiple words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("ee ff"), []byte("gg"), []byte("h i j k"), []byte("h i")},
						RHS:           [][]byte{[]byte("one")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("cc dd")},
						RHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("p"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("one"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("j"),
					Position:  3,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  4,
					Type:      0,
					Start:     8,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("p bbb s"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("aaa")},
						RHS:           [][]byte{[]byte("two words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("bbb")},
						RHS:           [][]byte{[]byte("one two"), []byte("very many multiple words")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("ee ff"), []byte("gg"), []byte("h i j k"), []byte("h i")},
						RHS:           [][]byte{[]byte("one")},
						BiDirectional: false,
						KeepOrig:      false,
					},
					{
						LHS:           [][]byte{[]byte("cc dd")},
						RHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						BiDirectional: false,
						KeepOrig:      false,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("p"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       1,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("one"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("very"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("two"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("many"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("multiple"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("words"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     2,
					End:       5,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  7,
					Type:      0,
					Start:     6,
					End:       7,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("national hockey league"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("national hockey league")},
						RHS:           [][]byte{[]byte("nhl")},
						BiDirectional: false,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("nhl"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       22,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("national"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       8,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("hockey"),
					Position:  2,
					Type:      0,
					Start:     9,
					End:       15,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("league"),
					Position:  3,
					Type:      0,
					Start:     16,
					End:       22,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("spider man"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("spiderman"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       10,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("spider"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       6,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("man"),
					Position:  2,
					Type:      0,
					Start:     7,
					End:       10,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("amazing spider man"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("amazing"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("spiderman"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     8,
					End:       18,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("spider"),
					Position:  2,
					Type:      0,
					Start:     8,
					End:       14,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("man"),
					Position:  3,
					Type:      0,
					Start:     15,
					End:       18,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("spiderman"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("spider"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("spiderman"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("man"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("spiderman enemies"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("spider"),
					Position:  1,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("spiderman"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       9,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("man"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     0,
					End:       9,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("enemies"),
					Position:  3,
					Type:      0,
					Start:     10,
					End:       17,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("the united states is wealthy"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("u s a"), []byte("united states"), []byte("usa"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("the"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("usa"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 7,
				},
				&analysis.Token{
					Term:      []byte("u"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 3,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       10,
					PosLength: 6,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 5,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("america"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       17,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  8,
					Type:      0,
					Start:     11,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("is"),
					Position:  9,
					Type:      0,
					Start:     18,
					End:       20,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("wealthy"),
					Position:  10,
					Type:      0,
					Start:     21,
					End:       28,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("the united states of america is wealthy"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("usa"), []byte("united states"), []byte("u s a"), []byte("united states of america")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("the"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("usa"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 7,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("u"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       10,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 6,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     4,
					End:       28,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  6,
					Type:      0,
					Start:     11,
					End:       17,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  7,
					Type:      0,
					Start:     18,
					End:       20,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("america"),
					Position:  8,
					Type:      0,
					Start:     21,
					End:       28,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("is"),
					Position:  9,
					Type:      0,
					Start:     29,
					End:       31,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("wealthy"),
					Position:  10,
					Type:      0,
					Start:     32,
					End:       39,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("the usa of balance"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("united states"), []byte("u s a"), []byte("united states of america"), []byte("usa")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("the"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("u"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("usa"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       7,
					PosLength: 7,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 6,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("america"),
					Position:  8,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  9,
					Type:      0,
					Start:     8,
					End:       10,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("balance"),
					Position:  10,
					Type:      0,
					Start:     11,
					End:       18,
					PosLength: 1,
				},
			},
		},
		{
			input: analysis.TestStruct{
				SearchPhrase: []byte("the usa is wealthy"),
				SynonymList: []analysis.SynonymStruct{
					{
						LHS:           [][]byte{[]byte("spider man"), []byte("spiderman")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
					{
						LHS:           [][]byte{[]byte("united states"), []byte("u s a"), []byte("united states of america"), []byte("usa")},
						RHS:           [][]byte{},
						BiDirectional: true,
						KeepOrig:      true,
					},
				},
			},
			output: analysis.TokenStream{
				&analysis.Token{
					Term:      []byte("the"),
					Position:  1,
					Type:      0,
					Start:     0,
					End:       3,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("u"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 2,
				},
				&analysis.Token{
					Term:      []byte("united"),
					Position:  2,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("usa"),
					Position:  2,
					Type:      0,
					Start:     4,
					End:       7,
					PosLength: 7,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  3,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 6,
				},
				&analysis.Token{
					Term:      []byte("s"),
					Position:  4,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("a"),
					Position:  5,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 4,
				},
				&analysis.Token{
					Term:      []byte("states"),
					Position:  6,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("of"),
					Position:  7,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("america"),
					Position:  8,
					Type:      analysis.Synonym,
					Start:     4,
					End:       7,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("is"),
					Position:  9,
					Type:      0,
					Start:     8,
					End:       10,
					PosLength: 1,
				},
				&analysis.Token{
					Term:      []byte("wealthy"),
					Position:  10,
					Type:      0,
					Start:     11,
					End:       18,
					PosLength: 1,
				},
			},
		},
	}
	cache := registry.NewCache()
	var CurrentSynonyms []analysis.SynonymStruct

	SynonymMap := &CurrentSynonyms
	synonymConfig := map[string]interface{}{
		"type":       "synonymAnalyzer",
		"synonymMap": SynonymMap,
	}
	_, err := cache.DefineAnalyzer(AnalyzerName, synonymConfig)
	if err != nil {
		t.Fatal(err)
	}
	numPassed := 0
	var notPassed []int
	for id, test := range tests {
		analyzer, err := cache.AnalyzerNamed(AnalyzerName)
		if err != nil {
			t.Fatal(err)
		}
		CurrentSynonyms = test.input.SynonymList
		actual := analyzer.Analyze(test.input.SearchPhrase)
		if assert.ElementsMatch(t, actual, test.output) {
			numPassed += 1
		} else {
			notPassed = append(notPassed, id)
		}
	}
	fmt.Printf("Passed %d out of %d unit test cases.\n", numPassed, len(tests))
	for _, f := range notPassed {
		fmt.Printf("Test Case number %v failed\n", f)
	}
}
